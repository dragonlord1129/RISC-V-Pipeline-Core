$date
	Thu Jan  9 19:36:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pipeline_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 # MemWriteM $end
$var wire 1 $ PCSrcE $end
$var wire 5 % RDW [4:0] $end
$var wire 5 & RD_M [4:0] $end
$var wire 1 ' RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ) WriteDataM [31:0] $end
$var wire 32 * ResultW [31:0] $end
$var wire 2 + ResultSrcE [1:0] $end
$var wire 1 , RegWriteE $end
$var wire 32 - ReadDataW [31:0] $end
$var wire 5 . RS2_E [4:0] $end
$var wire 5 / RS1_E [4:0] $end
$var wire 5 0 RD_E [4:0] $end
$var wire 32 1 RD2_E [31:0] $end
$var wire 32 2 RD1_E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 32 4 PCPlus4D [31:0] $end
$var wire 32 5 PCE [31:0] $end
$var wire 32 6 PCD [31:0] $end
$var wire 1 7 MemWriteE $end
$var wire 32 8 InstrD [31:0] $end
$var wire 32 9 Imm_Ext_E [31:0] $end
$var wire 2 : ForwardBE [1:0] $end
$var wire 2 ; ForwardAE [1:0] $end
$var wire 1 < BranchE $end
$var wire 1 = ALUSrcE $end
$var wire 32 > ALUResultM [31:0] $end
$var wire 3 ? ALUControlE [2:0] $end
$scope module decode $end
$var wire 3 @ ALUControlE [2:0] $end
$var wire 1 = ALUSrcE $end
$var wire 1 < BranchE $end
$var wire 32 A Imm_Ext_E [31:0] $end
$var wire 1 B JumpE $end
$var wire 1 7 MemWriteE $end
$var wire 32 C PCE [31:0] $end
$var wire 32 D PCPlus4E [31:0] $end
$var wire 32 E RD1_E [31:0] $end
$var wire 32 F RD2_E [31:0] $end
$var wire 5 G RDW [4:0] $end
$var wire 5 H RD_E [4:0] $end
$var wire 5 I RS1_E [4:0] $end
$var wire 5 J RS2_E [4:0] $end
$var wire 1 , RegWriteE $end
$var wire 1 ( RegWriteW $end
$var wire 2 K ResultSrcE [1:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 L readData2_D [31:0] $end
$var wire 32 M readData1_D [31:0] $end
$var wire 32 N ResultW [31:0] $end
$var wire 2 O ResultSrcD [1:0] $end
$var wire 1 P RegWriteD $end
$var wire 32 Q PCPlus4D [31:0] $end
$var wire 32 R PCD [31:0] $end
$var wire 1 S MemWriteD $end
$var wire 1 T JumpD $end
$var wire 32 U InstrD [31:0] $end
$var wire 32 V Imm_Ext_D [31:0] $end
$var wire 2 W ImmSrcD [1:0] $end
$var wire 1 X BranchD $end
$var wire 1 Y ALUSrcD $end
$var wire 3 Z ALUControlD [2:0] $end
$var reg 3 [ ALUControlD_R [2:0] $end
$var reg 1 = ALUSrcD_R $end
$var reg 1 < BranchD_R $end
$var reg 32 \ Imm_Ext_D_R [31:0] $end
$var reg 1 ] JumpD_R $end
$var reg 1 ^ MemWriteD_R $end
$var reg 32 _ PCD_R [31:0] $end
$var reg 32 ` PCPlus4D_R [31:0] $end
$var reg 32 a RD1_D_R [31:0] $end
$var reg 32 b RD2_D_R [31:0] $end
$var reg 5 c RD_D_R [4:0] $end
$var reg 5 d RS1_D_R [4:0] $end
$var reg 5 e RS2_D_R [4:0] $end
$var reg 1 f RegWriteD_R $end
$var reg 2 g ResultSrcD_R [1:0] $end
$scope module control_unit $end
$var wire 3 h funct3 [2:0] $end
$var wire 7 i funct7 [6:0] $end
$var wire 7 j opcode [6:0] $end
$var wire 2 k ResultSrc [1:0] $end
$var wire 1 P RegWrite $end
$var wire 1 S MemWrite $end
$var wire 1 T Jump $end
$var wire 2 l ImmSrc [1:0] $end
$var wire 1 X Branch $end
$var wire 1 Y ALUSrc $end
$var wire 2 m ALUOp [1:0] $end
$var wire 3 n ALUControl [2:0] $end
$scope module alu_decoder $end
$var wire 3 o funct3 [2:0] $end
$var wire 7 p funct7 [6:0] $end
$var wire 7 q opcode [6:0] $end
$var wire 2 r concatenation [1:0] $end
$var wire 2 s ALUOp [1:0] $end
$var wire 3 t ALUControl [2:0] $end
$upscope $end
$scope module main_decoder $end
$var wire 7 u opcode [6:0] $end
$var wire 2 v ResultSrc [1:0] $end
$var wire 1 P RegWrite $end
$var wire 1 S MemWrite $end
$var wire 1 T Jump $end
$var wire 2 w ImmSrc [1:0] $end
$var wire 1 X Branch $end
$var wire 1 Y ALUSrc $end
$var wire 2 x ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module registerFile $end
$var wire 1 ! clk $end
$var wire 5 y rd [4:0] $end
$var wire 5 z rs1 [4:0] $end
$var wire 5 { rs2 [4:0] $end
$var wire 1 " rst $end
$var wire 1 ( writeEnable $end
$var wire 32 | writeData [31:0] $end
$var wire 32 } readData2 [31:0] $end
$var wire 32 ~ readData1 [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 2 !" ImmSrc [1:0] $end
$var wire 32 "" In [31:0] $end
$var wire 32 #" Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module execute $end
$var wire 3 $" ALUControlE [2:0] $end
$var wire 32 %" ALUResultM [31:0] $end
$var wire 32 &" ALUResultM_E [31:0] $end
$var wire 1 = ALUSrcE $end
$var wire 1 < BranchE $end
$var wire 32 '" Imm_Ext_E [31:0] $end
$var wire 1 (" JumpE $end
$var wire 1 7 MemWriteE $end
$var wire 1 )" MemWriteM $end
$var wire 32 *" PCE [31:0] $end
$var wire 32 +" PCPlus4E [31:0] $end
$var wire 32 ," PCPlus4M [31:0] $end
$var wire 1 -" PCSrcE $end
$var wire 32 ." RD1_E [31:0] $end
$var wire 32 /" RD2_E [31:0] $end
$var wire 5 0" RD_E [4:0] $end
$var wire 5 1" RD_M [4:0] $end
$var wire 5 2" RS1_E [4:0] $end
$var wire 5 3" RS1_E_H [4:0] $end
$var wire 5 4" RS2_E [4:0] $end
$var wire 5 5" RS2_E_H [4:0] $end
$var wire 1 6" RegWriteE $end
$var wire 1 7" RegWriteM $end
$var wire 2 8" ResultSrcE [1:0] $end
$var wire 2 9" ResultSrcM [1:0] $end
$var wire 32 :" ResultW [31:0] $end
$var wire 32 ;" WriteDataE [31:0] $end
$var wire 32 <" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 =" ZeroE $end
$var wire 32 >" SrcBE_M [31:0] $end
$var wire 32 ?" SrcBE [31:0] $end
$var wire 32 @" SrcAE [31:0] $end
$var wire 32 A" ResultE [31:0] $end
$var wire 32 B" PCTargetE [31:0] $end
$var wire 2 C" ForwardBE [1:0] $end
$var wire 2 D" ForwardAE [1:0] $end
$var reg 32 E" ALUResultE_R [31:0] $end
$var reg 1 F" MemWriteE_R $end
$var reg 32 G" PCPlus4E_R [31:0] $end
$var reg 5 H" RD_E_R [4:0] $end
$var reg 1 I" RegWriteE_R $end
$var reg 2 J" ResultSrcE_R [1:0] $end
$var reg 32 K" WriteDataE_R [31:0] $end
$scope module SrcAEMux $end
$var wire 32 L" a [31:0] $end
$var wire 32 M" b [31:0] $end
$var wire 32 N" c [31:0] $end
$var wire 2 O" s [1:0] $end
$var wire 32 P" d [31:0] $end
$upscope $end
$scope module SrcBEMux $end
$var wire 32 Q" a [31:0] $end
$var wire 32 R" b [31:0] $end
$var wire 32 S" c [31:0] $end
$var wire 2 T" s [1:0] $end
$var wire 32 U" d [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 V" A [31:0] $end
$var wire 3 W" ALUControl [2:0] $end
$var wire 32 X" A_and_B [31:0] $end
$var wire 32 Y" A_or_B [31:0] $end
$var wire 32 Z" A_xor_B [31:0] $end
$var wire 1 [" carry $end
$var wire 32 \" not_B [31:0] $end
$var wire 1 ]" overflow $end
$var wire 32 ^" result [31:0] $end
$var wire 1 =" zero $end
$var wire 32 _" sum [31:0] $end
$var wire 32 `" slt [31:0] $end
$var wire 1 a" negative $end
$var wire 32 b" mux_2 [31:0] $end
$var wire 32 c" mux_1 [31:0] $end
$var wire 1 d" cout $end
$var wire 32 e" B [31:0] $end
$upscope $end
$scope module mux_1 $end
$var wire 32 f" a [31:0] $end
$var wire 32 g" b [31:0] $end
$var wire 1 = s $end
$var wire 32 h" c [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 i" a [31:0] $end
$var wire 32 j" b [31:0] $end
$var wire 32 k" c [31:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 1 $ PCSrcE $end
$var wire 32 l" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 m" PC_F [31:0] $end
$var wire 32 n" PCPlus4F [31:0] $end
$var wire 32 o" PCPlus4D [31:0] $end
$var wire 32 p" PCF [31:0] $end
$var wire 32 q" PCD [31:0] $end
$var wire 32 r" InstrF [31:0] $end
$var wire 32 s" InstrD [31:0] $end
$var reg 32 t" InstrF_reg [31:0] $end
$var reg 32 u" PCF_reg [31:0] $end
$var reg 32 v" PCPlus4F_reg [31:0] $end
$scope module Instruction_Memory $end
$var wire 1 " rst $end
$var wire 32 w" RD [31:0] $end
$var wire 32 x" A [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 y" PC_next [31:0] $end
$var reg 32 z" PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 {" a [31:0] $end
$var wire 32 |" b [31:0] $end
$var wire 32 }" c [31:0] $end
$upscope $end
$scope module PC_Mux $end
$var wire 32 ~" a [31:0] $end
$var wire 32 !# b [31:0] $end
$var wire 1 $ s $end
$var wire 32 "# c [31:0] $end
$upscope $end
$upscope $end
$scope module hazard $end
$var wire 5 ## RD_M [4:0] $end
$var wire 5 $# RD_W_W [4:0] $end
$var wire 5 %# RS1_E [4:0] $end
$var wire 5 &# RS2_E [4:0] $end
$var wire 1 ' RegWriteM $end
$var wire 1 '# RegWriteW_W $end
$var wire 1 (# rst $end
$var wire 2 )# ForwardBE [1:0] $end
$var wire 2 *# ForwardAE [1:0] $end
$upscope $end
$scope module memory $end
$var wire 32 +# ALUResultM [31:0] $end
$var wire 32 ,# ALUResultW [31:0] $end
$var wire 1 # MemWriteM $end
$var wire 32 -# PCPlus4M [31:0] $end
$var wire 32 .# PCPlus4W [31:0] $end
$var wire 5 /# RD_M [4:0] $end
$var wire 5 0# RD_W [4:0] $end
$var wire 32 1# ReadDataW [31:0] $end
$var wire 1 2# RegWriteM $end
$var wire 1 3# RegWriteW $end
$var wire 2 4# ResultSrcM [1:0] $end
$var wire 2 5# ResultSrcW [1:0] $end
$var wire 32 6# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 7# ReadDataM_W [31:0] $end
$var reg 32 8# ALUResultM_R [31:0] $end
$var reg 32 9# PCPlus4M_R [31:0] $end
$var reg 5 :# RD_M_R [4:0] $end
$var reg 32 ;# ReadDataM_R [31:0] $end
$var reg 1 <# RegWriteM_R $end
$var reg 2 =# ResultSrcM_R [1:0] $end
$scope module data_memory $end
$var wire 32 ># A [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ?# writeData [31:0] $end
$var wire 1 # writeEnable $end
$var wire 32 @# RD [31:0] $end
$upscope $end
$upscope $end
$scope module writeback $end
$var wire 32 A# ALUResultW [31:0] $end
$var wire 32 B# PCPlus4W [31:0] $end
$var wire 5 C# RD_W [4:0] $end
$var wire 5 D# RD_W_W [4:0] $end
$var wire 32 E# ReadDataW [31:0] $end
$var wire 1 ( RegWriteW $end
$var wire 1 F# RegWriteW_W $end
$var wire 2 G# ResultSrcW [1:0] $end
$var wire 32 H# ResultW [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 I# ResultW_X [31:0] $end
$var reg 5 J# RD_W_R [4:0] $end
$var reg 1 K# RegWriteW_R $end
$var reg 32 L# ResultW_R [31:0] $end
$scope module mux_3_by_1 $end
$var wire 32 M# a [31:0] $end
$var wire 32 N# b [31:0] $end
$var wire 32 O# c [31:0] $end
$var wire 2 P# s [1:0] $end
$var wire 32 Q# d [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx Q#
bz P#
bz O#
b0 N#
bz M#
b0 L#
0K#
b0 J#
bx I#
b0 H#
bz G#
0F#
b0 E#
b0 D#
bz C#
bz B#
bz A#
b0 @#
b0 ?#
b0 >#
b0 =#
0<#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
bz 4#
03#
z2#
b0 1#
b0 0#
bz /#
b0 .#
bz -#
b0 ,#
b0 +#
bx *#
bx )#
z(#
z'#
b0 &#
b0 %#
bz $#
bz ##
bx "#
bx !#
b100 ~"
b100 }"
b100 |"
b0 {"
b0 z"
bx y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b100 n"
bx m"
bx l"
bx k"
b0 j"
bz i"
bx h"
b0 g"
bx f"
bx e"
xd"
bx c"
bx b"
xa"
b0x `"
bx _"
bx ^"
x]"
bx \"
x["
bx Z"
bx Y"
bx X"
b0 W"
bx V"
bx U"
bx T"
bz S"
bz R"
b0 Q"
bx P"
bx O"
bz N"
bz M"
b0 L"
b0 K"
b0 J"
0I"
b0 H"
b0 G"
0F"
b0 E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
x="
b0 <"
b0 ;"
bz :"
b0 9"
bz 8"
07"
z6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
x-"
b0 ,"
bz +"
bz *"
0)"
z("
b0 '"
bz &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
bz y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
0f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
0^
0]
b0 \
b0 [
b0 Z
0Y
0X
b0 W
b0 V
b0 U
0T
0S
b0 R
b0 Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
bz G
b0 F
b0 E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
b0 >
0=
0<
bx ;
bx :
b0 9
b0 8
07
b0 6
b0 5
b0 4
bx 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
0,
b0 +
b0 *
b0 )
z(
z'
bz &
bz %
z$
z#
0"
1!
$end
#50
0!
#100
1!
#150
0!
#200
b10100000000001010010011 r"
b10100000000001010010011 w"
bx 7#
bx @#
1"
1!
#250
0!
#300
b101 V
b101 #"
bx r"
bx w"
b101 {
b10011 j
b10011 q
b10011 u
b100 4
b100 Q
b100 o"
b10100000000001010010011 8
b10100000000001010010011 U
b10100000000001010010011 ""
b10100000000001010010011 s"
bx n"
bx }"
bx ~"
bx p"
bx x"
bx z"
bx {"
b100 v"
b10100000000001010010011 t"
bz ,"
bz G"
bz 9"
bz J"
z7"
zI"
bx )
bx <"
bx 6#
bx ?#
bx K"
bx >
bx %"
bx E"
bx +#
bx >#
bz 0#
bz :#
bz .#
bz 9#
bx -
bx 1#
bx ;#
bx E#
bx N#
bz 5#
bz =#
z3#
z<#
zF#
zK#
bz D#
bz J#
bx *
bx N
bx |
bx H#
bx L#
1!
#350
0!
#400
bx Z
bx n
bx t
xP
xY
xT
bx m
bx s
bx x
bx V
bx #"
bx r
xS
xX
bx W
bx l
bx w
bx !"
bx O
bx k
bx v
bx {
bx z
bx h
bx o
bx i
bx p
bx j
bx q
bx u
bx 4
bx Q
bx o"
bx 6
bx R
bx q"
bx 8
bx U
bx ""
bx s"
bx ,#
bx 8#
b101 5"
b101 .
b101 J
b101 e
b101 4"
b101 &#
b100 D
b100 `
b101 0
b101 H
b101 0"
b101 c
b101 9
b101 A
b101 \
b101 '"
b101 g"
b101 j"
bx v"
bx u"
bx t"
1!
#450
0!
#500
bx 5"
bx .
bx J
bx e
bx 4"
bx &#
bx 3"
bx /
bx I
bx d
bx 2"
bx %#
bx D
bx `
bx 5
bx C
bx _
bx 0
bx H
bx 0"
bx c
bx 9
bx A
bx \
bx '"
bx g"
bx j"
bx ?
bx @
bx [
bx $"
bx W"
xB
x]
x<
bx +
bx K
bx g
x7
x^
x=
x,
xf
b101 1"
b101 H"
1!
#550
0!
#600
bx 1"
bx H"
x)"
xF"
1!
#650
0!
#700
1!
#750
0!
#800
1!
#850
0!
#900
1!
#950
0!
#1000
1!
#1050
0!
#1100
1!
#1150
0!
#1200
1!
