$date
	Thu Mar 20 21:42:17 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pipeline_top_tb $end
$var wire 32 ! Result [31:0] $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module dut $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 $ WriteDataM [31:0] $end
$var wire 32 % ResultW [31:0] $end
$var wire 2 & ResultSrcW [1:0] $end
$var wire 2 ' ResultSrcM [1:0] $end
$var wire 2 ( ResultSrcE [1:0] $end
$var wire 32 ) Result [31:0] $end
$var wire 1 * RegWriteW $end
$var wire 1 + RegWriteM $end
$var wire 1 , RegWriteE $end
$var wire 32 - ReadDataW [31:0] $end
$var wire 5 . RS2_E_H [4:0] $end
$var wire 5 / RS2_E [4:0] $end
$var wire 5 0 RS1_E_H [4:0] $end
$var wire 5 1 RS1_E [4:0] $end
$var wire 5 2 RD_W [4:0] $end
$var wire 5 3 RD_M [4:0] $end
$var wire 5 4 RD_E [4:0] $end
$var wire 32 5 RD2_E [31:0] $end
$var wire 32 6 RD1_E [31:0] $end
$var wire 32 7 PCTargetE [31:0] $end
$var wire 1 8 PCSrcE $end
$var wire 32 9 PCPlus4W [31:0] $end
$var wire 32 : PCPlus4M [31:0] $end
$var wire 32 ; PCPlus4E [31:0] $end
$var wire 32 < PCPlus4D [31:0] $end
$var wire 32 = PCE [31:0] $end
$var wire 32 > PCD [31:0] $end
$var wire 1 ? MemWriteM $end
$var wire 1 @ MemWriteE $end
$var wire 1 A JumpE $end
$var wire 32 B InstrD [31:0] $end
$var wire 32 C Imm_Ext_E [31:0] $end
$var wire 2 D ForwardBE [1:0] $end
$var wire 2 E ForwardAE [1:0] $end
$var wire 1 F BranchE $end
$var wire 1 G ALUSrcE $end
$var wire 32 H ALUResultW [31:0] $end
$var wire 32 I ALUResultM [31:0] $end
$var wire 3 J ALUControlE [2:0] $end
$scope module decode $end
$var wire 3 K ALUControlE [2:0] $end
$var wire 1 G ALUSrcE $end
$var wire 1 F BranchE $end
$var wire 32 L Imm_Ext_E [31:0] $end
$var wire 1 A JumpE $end
$var wire 1 @ MemWriteE $end
$var wire 32 M PCE [31:0] $end
$var wire 32 N PCPlus4E [31:0] $end
$var wire 32 O RD1_E [31:0] $end
$var wire 32 P RD2_E [31:0] $end
$var wire 5 Q RD_E [4:0] $end
$var wire 5 R RS1_E [4:0] $end
$var wire 5 S RS2_E [4:0] $end
$var wire 1 , RegWriteE $end
$var wire 2 T ResultSrcE [1:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 U readData2_D [31:0] $end
$var wire 32 V readData1_D [31:0] $end
$var wire 32 W ResultW [31:0] $end
$var wire 2 X ResultSrcD [1:0] $end
$var wire 1 * RegWriteW $end
$var wire 1 Y RegWriteD $end
$var wire 5 Z RDW [4:0] $end
$var wire 32 [ PCPlus4D [31:0] $end
$var wire 32 \ PCD [31:0] $end
$var wire 1 ] MemWriteD $end
$var wire 1 ^ JumpD $end
$var wire 32 _ InstrD [31:0] $end
$var wire 32 ` Imm_Ext_D [31:0] $end
$var wire 2 a ImmSrcD [1:0] $end
$var wire 1 b BranchD $end
$var wire 1 c ALUSrcD $end
$var wire 3 d ALUControlD [2:0] $end
$var reg 3 e ALUControlD_R [2:0] $end
$var reg 1 G ALUSrcD_R $end
$var reg 1 f BranchD_R $end
$var reg 32 g Imm_Ext_D_R [31:0] $end
$var reg 1 h JumpD_R $end
$var reg 1 i MemWriteD_R $end
$var reg 32 j PCD_R [31:0] $end
$var reg 32 k PCPlus4D_R [31:0] $end
$var reg 32 l RD1_D_R [31:0] $end
$var reg 32 m RD2_D_R [31:0] $end
$var reg 5 n RD_D_R [4:0] $end
$var reg 5 o RS1_D_R [4:0] $end
$var reg 5 p RS2_D_R [4:0] $end
$var reg 1 q RegWriteD_R $end
$var reg 2 r ResultSrcD_R [1:0] $end
$scope module control_unit $end
$var wire 3 s funct3 [2:0] $end
$var wire 7 t funct7 [6:0] $end
$var wire 7 u opcode [6:0] $end
$var wire 2 v ResultSrc [1:0] $end
$var wire 1 Y RegWrite $end
$var wire 1 ] MemWrite $end
$var wire 1 ^ Jump $end
$var wire 2 w ImmSrc [1:0] $end
$var wire 1 b Branch $end
$var wire 1 c ALUSrc $end
$var wire 2 x ALUOp [1:0] $end
$var wire 3 y ALUControl [2:0] $end
$scope module alu_decoder $end
$var wire 3 z funct3 [2:0] $end
$var wire 7 { funct7 [6:0] $end
$var wire 7 | opcode [6:0] $end
$var wire 2 } concatenation [1:0] $end
$var wire 2 ~ ALUOp [1:0] $end
$var wire 3 !" ALUControl [2:0] $end
$var parameter 3 "" AND $end
$var parameter 3 #" OR $end
$var parameter 3 $" add $end
$var parameter 3 %" slt $end
$var parameter 3 &" sub $end
$upscope $end
$scope module main_decoder $end
$var wire 7 '" opcode [6:0] $end
$var wire 2 (" ResultSrc [1:0] $end
$var wire 1 Y RegWrite $end
$var wire 1 ] MemWrite $end
$var wire 1 ^ Jump $end
$var wire 2 )" ImmSrc [1:0] $end
$var wire 1 b Branch $end
$var wire 1 c ALUSrc $end
$var wire 2 *" ALUOp [1:0] $end
$var parameter 7 +" R_type $end
$var parameter 7 ," beq $end
$var parameter 7 -" imm $end
$var parameter 7 ." jal $end
$var parameter 7 /" jalr $end
$var parameter 7 0" lw $end
$var parameter 7 1" sw $end
$upscope $end
$upscope $end
$scope module registerFile $end
$var wire 1 " clk $end
$var wire 5 2" rs1 [4:0] $end
$var wire 5 3" rs2 [4:0] $end
$var wire 1 # rst $end
$var wire 1 * writeEnable $end
$var wire 32 4" writeData [31:0] $end
$var wire 32 5" readData2 [31:0] $end
$var wire 32 6" readData1 [31:0] $end
$var wire 5 7" rd [4:0] $end
$var integer 32 8" i [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 2 9" ImmSrc [1:0] $end
$var wire 32 :" In [31:0] $end
$var wire 32 ;" Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module execute $end
$var wire 3 <" ALUControlE [2:0] $end
$var wire 32 =" ALUResultM [31:0] $end
$var wire 32 >" ALUResultM_E [31:0] $end
$var wire 1 G ALUSrcE $end
$var wire 1 F BranchE $end
$var wire 32 ?" Imm_Ext_E [31:0] $end
$var wire 1 A JumpE $end
$var wire 1 @ MemWriteE $end
$var wire 1 ? MemWriteM $end
$var wire 32 @" PCE [31:0] $end
$var wire 32 A" PCPlus4E [31:0] $end
$var wire 32 B" PCPlus4M [31:0] $end
$var wire 32 C" RD1_E [31:0] $end
$var wire 32 D" RD2_E [31:0] $end
$var wire 5 E" RD_E [4:0] $end
$var wire 5 F" RD_M [4:0] $end
$var wire 5 G" RS1_E [4:0] $end
$var wire 5 H" RS1_E_H [4:0] $end
$var wire 5 I" RS2_E [4:0] $end
$var wire 5 J" RS2_E_H [4:0] $end
$var wire 1 , RegWriteE $end
$var wire 1 + RegWriteM $end
$var wire 2 K" ResultSrcE [1:0] $end
$var wire 2 L" ResultSrcM [1:0] $end
$var wire 32 M" WriteDataE [31:0] $end
$var wire 32 N" WriteDataM [31:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 O" ZeroE $end
$var wire 32 P" SrcBE_M [31:0] $end
$var wire 32 Q" SrcBE [31:0] $end
$var wire 32 R" SrcAE [31:0] $end
$var wire 32 S" ResultW [31:0] $end
$var wire 32 T" ResultE [31:0] $end
$var wire 32 U" PCTargetE [31:0] $end
$var wire 1 8 PCSrcE $end
$var wire 2 V" ForwardBE [1:0] $end
$var wire 2 W" ForwardAE [1:0] $end
$var reg 32 X" ALUResultE_R [31:0] $end
$var reg 1 Y" MemWriteE_R $end
$var reg 32 Z" PCPlus4E_R [31:0] $end
$var reg 1 8 PCSrcE_R $end
$var reg 5 [" RD_E_R [4:0] $end
$var reg 1 + RegWriteE_R $end
$var reg 2 \" ResultSrcE_R [1:0] $end
$var reg 32 ]" WriteDataE_R [31:0] $end
$scope module SrcAEMux $end
$var wire 32 ^" a [31:0] $end
$var wire 32 _" c [31:0] $end
$var wire 2 `" s [1:0] $end
$var wire 32 a" d [31:0] $end
$var wire 32 b" b [31:0] $end
$upscope $end
$scope module SrcBEMux $end
$var wire 32 c" a [31:0] $end
$var wire 32 d" c [31:0] $end
$var wire 2 e" s [1:0] $end
$var wire 32 f" d [31:0] $end
$var wire 32 g" b [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 h" A [31:0] $end
$var wire 3 i" ALUControl [2:0] $end
$var wire 1 j" carry $end
$var wire 1 k" overflow $end
$var wire 32 l" result [31:0] $end
$var wire 1 O" zero $end
$var wire 32 m" sum [31:0] $end
$var wire 32 n" slt [31:0] $end
$var wire 1 o" negative $end
$var wire 32 p" mux_2 [31:0] $end
$var wire 32 q" mux_1 [31:0] $end
$var wire 1 r" cout $end
$var wire 32 s" B [31:0] $end
$var parameter 32 t" ALU_WIDTH $end
$var parameter 32 u" WIDTH $end
$upscope $end
$scope module alu_mux $end
$var wire 32 v" a [31:0] $end
$var wire 32 w" b [31:0] $end
$var wire 1 G s $end
$var wire 32 x" c [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 y" a [31:0] $end
$var wire 32 z" b [31:0] $end
$var wire 32 {" c [31:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 1 8 PCSrcE $end
$var wire 32 |" PCTargetE [31:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 }" PC_F [31:0] $end
$var wire 32 ~" PCPlus4F [31:0] $end
$var wire 32 !# PCPlus4D [31:0] $end
$var wire 32 "# PCF [31:0] $end
$var wire 32 ## PCD [31:0] $end
$var wire 32 $# InstrF [31:0] $end
$var wire 32 %# InstrD [31:0] $end
$var reg 32 &# InstrF_reg [31:0] $end
$var reg 32 '# PCF_reg [31:0] $end
$var reg 32 (# PCPlus4F_reg [31:0] $end
$scope module Instruction_Memory $end
$var wire 1 # rst $end
$var wire 32 )# RD [31:0] $end
$var wire 32 *# A [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 +# PC_next [31:0] $end
$var reg 32 ,# PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 -# a [31:0] $end
$var wire 32 .# b [31:0] $end
$var wire 32 /# c [31:0] $end
$upscope $end
$scope module PC_Mux $end
$var wire 32 0# a [31:0] $end
$var wire 32 1# b [31:0] $end
$var wire 1 8 s $end
$var wire 32 2# c [31:0] $end
$upscope $end
$upscope $end
$scope module hazard $end
$var wire 5 3# RD_M [4:0] $end
$var wire 5 4# RS1_E [4:0] $end
$var wire 5 5# RS2_E [4:0] $end
$var wire 1 + RegWriteM $end
$var wire 1 # rst $end
$var wire 1 * RegWriteW $end
$var wire 5 6# RD_W [4:0] $end
$var wire 2 7# ForwardBE [1:0] $end
$var wire 2 8# ForwardAE [1:0] $end
$upscope $end
$scope module memory $end
$var wire 32 9# ALUResultM [31:0] $end
$var wire 32 :# ALUResultW [31:0] $end
$var wire 1 ? MemWriteM $end
$var wire 32 ;# PCPlus4M [31:0] $end
$var wire 32 <# PCPlus4W [31:0] $end
$var wire 5 =# RD_M [4:0] $end
$var wire 5 ># RD_W [4:0] $end
$var wire 32 ?# ReadDataW [31:0] $end
$var wire 1 + RegWriteM $end
$var wire 1 * RegWriteW $end
$var wire 2 @# ResultSrcM [1:0] $end
$var wire 2 A# ResultSrcW [1:0] $end
$var wire 32 B# WriteDataM [31:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 C# ReadDataM_W [31:0] $end
$var reg 32 D# ALUResultM_R [31:0] $end
$var reg 32 E# PCPlus4M_R [31:0] $end
$var reg 5 F# RD_M_R [4:0] $end
$var reg 32 G# ReadDataM_R [31:0] $end
$var reg 1 * RegWriteM_R $end
$var reg 2 H# ResultSrcM_R [1:0] $end
$scope module data_memory $end
$var wire 32 I# A [31:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 J# writeData [31:0] $end
$var wire 1 ? writeEnable $end
$var wire 32 K# RD [31:0] $end
$var integer 32 L# i [31:0] $end
$upscope $end
$upscope $end
$scope module writeback $end
$var wire 32 M# ALUResultW [31:0] $end
$var wire 32 N# PCPlus4W [31:0] $end
$var wire 5 O# RD_W [4:0] $end
$var wire 32 P# ReadDataW [31:0] $end
$var wire 1 * RegWriteW $end
$var wire 2 Q# ResultSrcW [1:0] $end
$var wire 32 R# ResultW [31:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 S# ResultW_X [31:0] $end
$scope module mux_3_by_1 $end
$var wire 32 T# a [31:0] $end
$var wire 32 U# b [31:0] $end
$var wire 32 V# c [31:0] $end
$var wire 2 W# s [1:0] $end
$var wire 32 X# d [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 u"
b11 t"
b100011 1"
b11 0"
b1100111 /"
b1101111 ."
b10011 -"
b1100011 ,"
b110011 +"
b1 &"
b101 %"
b0 $"
b11 #"
b10 ""
$end
#0
$dumpvars
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b1111111111 L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b100 2#
b0 1#
b100 0#
b100 /#
b100 .#
b0 -#
b0 ,#
b100 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b100 ~"
b100 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 s"
0r"
b0 q"
b0 p"
0o"
b0 n"
b0 m"
b0 l"
0k"
0j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
0Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
1O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b11111 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 *"
b0 )"
b0 ("
b0 '"
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
0q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
0i
0h
b0 g
0f
b0 e
b0 d
0c
0b
b0 a
b0 `
b0 _
0^
0]
b0 \
b0 [
b0 Z
0Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
0G
0F
b0 E
b0 D
b0 C
b0 B
0A
0@
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
0,
0+
0*
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
0#
1"
b0 !
$end
#50
0"
#100
1"
#150
0"
#200
b10100000000001010010011 $#
b10100000000001010010011 )#
1#
1"
#250
0"
#300
1Y
1c
b101 `
b101 ;"
b1100000000001100010011 $#
b1100000000001100010011 )#
b101 3"
b10011 u
b10011 |
b10011 '"
b1000 }"
b1000 +#
b1000 2#
b100 <
b100 [
b100 !#
b10100000000001010010011 B
b10100000000001010010011 _
b10100000000001010010011 :"
b10100000000001010010011 %#
b1000 ~"
b1000 /#
b1000 0#
b100 "#
b100 *#
b100 ,#
b100 -#
b100 (#
b10100000000001010010011 &#
1"
#350
0"
#400
0O"
b101 T"
b101 l"
b101 p"
b101 m"
b101 q"
b11 `
b11 ;"
b11000101000001110110011 $#
b11000101000001110110011 )#
b101 Q"
b101 s"
b101 x"
b11 3"
b1100 }"
b1100 +#
b1100 2#
b1000 <
b1000 [
b1000 !#
b100 >
b100 \
b100 ##
b1100000000001100010011 B
b1100000000001100010011 _
b1100000000001100010011 :"
b1100000000001100010011 %#
b1100 ~"
b1100 /#
b1100 0#
b1000 "#
b1000 *#
b1000 ,#
b1000 -#
b101 .
b101 J"
b101 5#
b101 /
b101 S
b101 p
b101 I"
b100 ;
b100 N
b100 A"
b100 k
b101 4
b101 Q
b101 E"
b101 n
b101 7
b101 U"
b101 {"
b101 |"
b101 1#
b101 C
b101 L
b101 g
b101 ?"
b101 w"
b101 z"
1G
1,
1q
b1000 (#
b100 '#
b1100000000001100010011 &#
1"
#450
0"
#500
1Y
0c
b10 x
b10 ~
b10 *"
b11 T"
b11 l"
b11 p"
b110 `
b110 ;"
b10 }
b11 m"
b10010000000011 $#
b10010000000011 )#
b110 3"
b101 2"
b110011 u
b110011 |
b110011 '"
b11 q"
b10000 }"
b10000 +#
b10000 2#
b1100 <
b1100 [
b1100 !#
b1000 >
b1000 \
b1000 ##
b11000101000001110110011 B
b11000101000001110110011 _
b11000101000001110110011 :"
b11000101000001110110011 %#
b11 Q"
b11 s"
b11 x"
b10000 ~"
b10000 /#
b10000 0#
b1100 "#
b1100 *#
b1100 ,#
b1100 -#
b1100 (#
b1000 '#
b11000101000001110110011 &#
b11 .
b11 J"
b11 5#
b11 /
b11 S
b11 p
b11 I"
b1000 ;
b1000 N
b1000 A"
b1000 k
b100 =
b100 M
b100 j
b100 @"
b100 y"
b110 4
b110 Q
b110 E"
b110 n
b111 7
b111 U"
b111 {"
b111 |"
b111 1#
b11 C
b11 L
b11 g
b11 ?"
b11 w"
b11 z"
b101 3
b101 F"
b101 ["
b101 3#
b101 =#
b100 :
b100 B"
b100 ;#
b100 Z"
1+
b101 I
b101 ="
b101 >"
b101 X"
b101 _"
b101 d"
b101 9#
b101 I#
1"
#550
0"
#600
b101 R"
b101 a"
b101 h"
b11 P"
b11 f"
b11 v"
1c
b1 E
b1 W"
b1 `"
b1 8#
0O"
b1000 T"
b1000 l"
b1000 p"
b0 x
b0 ~
b0 *"
b10 D
b10 V"
b10 e"
b10 7#
b1000 m"
b0 `
b0 ;"
b0 }
b1 X
b1 v
b1 ("
b100000000010010010011 $#
b100000000010010010011 )#
b101 !
b101 )
b11 q"
b0 3"
b0 2"
b10 s
b10 z
b11 u
b11 |
b11 '"
b10100 }"
b10100 +#
b10100 2#
b101 %
b101 W
b101 4"
b101 S"
b101 b"
b101 g"
b101 R#
b101 S#
b101 X#
b11 Q"
b11 s"
b11 x"
b10000 <
b10000 [
b10000 !#
b1100 >
b1100 \
b1100 ##
b10010000000011 B
b10010000000011 _
b10010000000011 :"
b10010000000011 %#
b10100 ~"
b10100 /#
b10100 0#
b10000 "#
b10000 *#
b10000 ,#
b10000 -#
b101 2
b101 Z
b101 7"
b101 6#
b101 >#
b101 F#
b101 O#
b100 9
b100 <#
b100 E#
b100 N#
b100 V#
b101 H
b101 :#
b101 D#
b101 M#
b101 T#
1*
b110 3
b110 F"
b110 ["
b110 3#
b110 =#
b1000 :
b1000 B"
b1000 ;#
b1000 Z"
b11 I
b11 ="
b11 >"
b11 X"
b11 _"
b11 d"
b11 9#
b11 I#
b110 .
b110 J"
b110 5#
b110 /
b110 S
b110 p
b110 I"
b101 0
b101 H"
b101 4#
b101 1
b101 R
b101 o
b101 G"
b1100 ;
b1100 N
b1100 A"
b1100 k
b1000 =
b1000 M
b1000 j
b1000 @"
b1000 y"
b111 4
b111 Q
b111 E"
b111 n
b1110 7
b1110 U"
b1110 {"
b1110 |"
b1110 1#
b110 C
b110 L
b110 g
b110 ?"
b110 w"
b110 z"
0G
b10000 (#
b1100 '#
b10010000000011 &#
1"
#650
0"
#700
1O"
b0 T"
b0 l"
b0 p"
b0 E
b0 W"
b0 `"
b0 8#
b0 m"
b1 `
b1 ;"
b0 X
b0 v
b0 ("
b0 q"
b0 D
b0 V"
b0 e"
b0 7#
b0 P"
b0 f"
b0 v"
b0 R"
b0 a"
b0 h"
b100101000000010100110011 $#
b100101000000010100110011 )#
b1 3"
b0 s
b0 z
b10011 u
b10011 |
b10011 '"
b0 Q"
b0 s"
b0 x"
b11 !
b11 )
b11000 }"
b11000 +#
b11000 2#
b10100 <
b10100 [
b10100 !#
b10000 >
b10000 \
b10000 ##
b100000000010010010011 B
b100000000010010010011 _
b100000000010010010011 :"
b100000000010010010011 %#
b11 %
b11 W
b11 4"
b11 S"
b11 b"
b11 g"
b11 R#
b11 S#
b11 X#
b11000 ~"
b11000 /#
b11000 0#
b10100 "#
b10100 *#
b10100 ,#
b10100 -#
b10100 (#
b10000 '#
b100000000010010010011 &#
b0 .
b0 J"
b0 5#
b0 /
b0 S
b0 p
b0 I"
b0 0
b0 H"
b0 4#
b0 1
b0 R
b0 o
b0 G"
b10000 ;
b10000 N
b10000 A"
b10000 k
b1100 =
b1100 M
b1100 j
b1100 @"
b1100 y"
b1000 4
b1000 Q
b1000 E"
b1000 n
b1100 7
b1100 U"
b1100 {"
b1100 |"
b1100 1#
b0 C
b0 L
b0 g
b0 ?"
b0 w"
b0 z"
b1 (
b1 T
b1 K"
b1 r
1G
b111 3
b111 F"
b111 ["
b111 3#
b111 =#
b1100 :
b1100 B"
b1100 ;#
b1100 Z"
b11 $
b11 N"
b11 B#
b11 J#
b11 M"
b11 ]"
b1000 I
b1000 ="
b1000 >"
b1000 X"
b1000 _"
b1000 d"
b1000 9#
b1000 I#
b110 2
b110 Z
b110 7"
b110 6#
b110 >#
b110 F#
b110 O#
b1000 9
b1000 <#
b1000 E#
b1000 N#
b1000 V#
b11 H
b11 :#
b11 D#
b11 M#
b11 T#
1"
#750
0"
#800
0O"
b1 T"
b1 l"
b1 p"
1Y
0c
b10 x
b10 ~
b10 *"
b1 m"
b1001 `
b1001 ;"
b10 }
bx $#
bx )#
b1000 !
b1000 )
b1 q"
b1001 3"
b1000 2"
b110011 u
b110011 |
b110011 '"
b11100 }"
b11100 +#
b11100 2#
b1000 %
b1000 W
b1000 4"
b1000 S"
b1000 b"
b1000 g"
b1000 R#
b1000 S#
b1000 X#
b1 Q"
b1 s"
b1 x"
b11000 <
b11000 [
b11000 !#
b10100 >
b10100 \
b10100 ##
b100101000000010100110011 B
b100101000000010100110011 _
b100101000000010100110011 :"
b100101000000010100110011 %#
b11100 ~"
b11100 /#
b11100 0#
b11000 "#
b11000 *#
b11000 ,#
b11000 -#
b111 2
b111 Z
b111 7"
b111 6#
b111 >#
b111 F#
b111 O#
b1100 9
b1100 <#
b1100 E#
b1100 N#
b1100 V#
b1000 H
b1000 :#
b1000 D#
b1000 M#
b1000 T#
b1000 3
b1000 F"
b1000 ["
b1000 3#
b1000 =#
b10000 :
b10000 B"
b10000 ;#
b10000 Z"
b1 '
b1 L"
b1 @#
b1 \"
b0 $
b0 N"
b0 B#
b0 J#
b0 M"
b0 ]"
b0 I
b0 ="
b0 >"
b0 X"
b0 _"
b0 d"
b0 9#
b0 I#
b1 .
b1 J"
b1 5#
b1 /
b1 S
b1 p
b1 I"
b10100 ;
b10100 N
b10100 A"
b10100 k
b10000 =
b10000 M
b10000 j
b10000 @"
b10000 y"
b1001 4
b1001 Q
b1001 E"
b1001 n
b10001 7
b10001 U"
b10001 {"
b10001 |"
b10001 1#
b1 C
b1 L
b1 g
b1 ?"
b1 w"
b1 z"
b0 (
b0 T
b0 K"
b0 r
b11000 (#
b10100 '#
b100101000000010100110011 &#
1"
#850
0"
#900
xY
bx d
bx y
bx !"
b1 P"
b1 f"
b1 v"
0O"
xc
x^
bx x
bx ~
bx *"
b1 E
b1 W"
b1 `"
b1 8#
b1 T"
b1 l"
b1 p"
bx `
bx ;"
bx U
bx 5"
bx V
bx 6"
bx }
x]
xb
bx a
bx w
bx )"
bx 9"
bx X
bx v
bx ("
b10 D
b10 V"
b10 e"
b10 7#
b1 m"
bx 3"
bx 2"
bx s
bx z
bx t
bx {
bx u
bx |
bx '"
b1 q"
b0 !
b0 )
b100000 }"
b100000 +#
b100000 2#
b11100 <
b11100 [
b11100 !#
b11000 >
b11000 \
b11000 ##
bx B
bx _
bx :"
bx %#
b1 Q"
b1 s"
b1 x"
b0 %
b0 W
b0 4"
b0 S"
b0 b"
b0 g"
b0 R#
b0 S#
b0 X#
b100000 ~"
b100000 /#
b100000 0#
b11100 "#
b11100 *#
b11100 ,#
b11100 -#
b11100 (#
b11000 '#
bx &#
b1001 .
b1001 J"
b1001 5#
b1001 /
b1001 S
b1001 p
b1001 I"
b1000 0
b1000 H"
b1000 4#
b1000 1
b1000 R
b1000 o
b1000 G"
b11000 ;
b11000 N
b11000 A"
b11000 k
b10100 =
b10100 M
b10100 j
b10100 @"
b10100 y"
b1010 4
b1010 Q
b1010 E"
b1010 n
b11101 7
b11101 U"
b11101 {"
b11101 |"
b11101 1#
b1001 C
b1001 L
b1001 g
b1001 ?"
b1001 w"
b1001 z"
0G
b1001 3
b1001 F"
b1001 ["
b1001 3#
b1001 =#
b10100 :
b10100 B"
b10100 ;#
b10100 Z"
b0 '
b0 L"
b0 @#
b0 \"
b1 I
b1 ="
b1 >"
b1 X"
b1 _"
b1 d"
b1 9#
b1 I#
b1000 2
b1000 Z
b1000 7"
b1000 6#
b1000 >#
b1000 F#
b1000 O#
b10000 9
b10000 <#
b10000 E#
b10000 N#
b10000 V#
b0 H
b0 :#
b0 D#
b0 M#
b0 T#
b1 &
b1 A#
b1 H#
b1 Q#
b1 W#
1"
#950
0"
#1000
xk"
bx P"
bx f"
bx v"
xo"
bx R"
bx a"
bx h"
bx D
bx V"
bx e"
bx 7#
bx E
bx W"
bx `"
bx 8#
b0x n"
xj"
bx q"
b1 !
b1 )
bx m"
xr"
xO"
bx Q"
bx s"
bx x"
b100100 }"
b100100 +#
b100100 2#
b1 %
b1 W
b1 4"
b1 S"
b1 b"
b1 g"
b1 R#
b1 S#
b1 X#
bx T"
bx l"
bx p"
b100000 <
b100000 [
b100000 !#
b11100 >
b11100 \
b11100 ##
b100100 ~"
b100100 /#
b100100 0#
b100000 "#
b100000 *#
b100000 ,#
b100000 -#
b1001 2
b1001 Z
b1001 7"
b1001 6#
b1001 >#
b1001 F#
b1001 O#
b10100 9
b10100 <#
b10100 E#
b10100 N#
b10100 V#
b1 H
b1 :#
b1 D#
b1 M#
b1 T#
b0 &
b0 A#
b0 H#
b0 Q#
b0 W#
b1010 3
b1010 F"
b1010 ["
b1010 3#
b1010 =#
b11000 :
b11000 B"
b11000 ;#
b11000 Z"
b1 $
b1 N"
b1 B#
b1 J#
b1 M"
b1 ]"
bx .
bx J"
bx 5#
bx /
bx S
bx p
bx I"
bx 0
bx H"
bx 4#
bx 1
bx R
bx o
bx G"
b11100 ;
b11100 N
b11100 A"
b11100 k
b11000 =
b11000 M
b11000 j
b11000 @"
b11000 y"
bx 4
bx Q
bx E"
bx n
bx 7
bx U"
bx {"
bx |"
bx 1#
bx C
bx L
bx g
bx ?"
bx w"
bx z"
bx 5
bx P
bx m
bx D"
bx c"
bx 6
bx O
bx l
bx C"
bx ^"
bx J
bx K
bx e
bx <"
bx i"
xA
xh
xF
xf
bx (
bx T
bx K"
bx r
x@
xi
xG
x,
xq
b100000 (#
b11100 '#
1"
#1050
0"
#1100
bx }"
bx +#
bx 2#
b100100 <
b100100 [
b100100 !#
b100000 >
b100000 \
b100000 ##
bx C#
bx K#
b101000 ~"
b101000 /#
b101000 0#
b100100 "#
b100100 *#
b100100 ,#
b100100 -#
b100100 (#
b100000 '#
b100000 ;
b100000 N
b100000 A"
b100000 k
b11100 =
b11100 M
b11100 j
b11100 @"
b11100 y"
bx 3
bx F"
bx ["
bx 3#
bx =#
b11100 :
b11100 B"
b11100 ;#
b11100 Z"
bx '
bx L"
bx @#
bx \"
x?
xY"
x8
x+
bx $
bx N"
bx B#
bx J#
bx M"
bx ]"
bx I
bx ="
bx >"
bx X"
bx _"
bx d"
bx 9#
bx I#
b1010 2
b1010 Z
b1010 7"
b1010 6#
b1010 >#
b1010 F#
b1010 O#
b11000 9
b11000 <#
b11000 E#
b11000 N#
b11000 V#
1"
#1150
0"
#1200
bx !
bx )
bx %
bx W
bx 4"
bx S"
bx b"
bx g"
bx R#
bx S#
bx X#
b101000 <
b101000 [
b101000 !#
b100100 >
b100100 \
b100100 ##
bx ~"
bx /#
bx 0#
bx "#
bx *#
bx ,#
bx -#
bx 2
bx Z
bx 7"
bx 6#
bx >#
bx F#
bx O#
b11100 9
b11100 <#
b11100 E#
b11100 N#
b11100 V#
bx -
bx ?#
bx G#
bx P#
bx U#
bx H
bx :#
bx D#
bx M#
bx T#
bx &
bx A#
bx H#
bx Q#
bx W#
x*
b100000 :
b100000 B"
b100000 ;#
b100000 Z"
b100100 ;
b100100 N
b100100 A"
b100100 k
b100000 =
b100000 M
b100000 j
b100000 @"
b100000 y"
b101000 (#
b100100 '#
1"
