$date
   Wed Jan 22 21:22:21 2025
$end

$version
  2024.2.0
  $dumpfile ("dump.vcd") 
$end

$timescale
  1ps
$end

$scope module pipeline_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 4 # Result [3:0] $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 4 # Result [3:0] $end
$var wire 1 & PCSrcE $end
$var wire 1 ' RegWriteW $end
$var wire 1 ( RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 1 * ALUSrcE $end
$var wire 1 + MemWriteE $end
$var wire 1 , MemWriteM $end
$var wire 1 - BranchE $end
$var wire 1 . JumpE $end
$var wire 2 / ResultSrcE [1:0] $end
$var wire 2 0 ResultSrcW [1:0] $end
$var wire 2 1 ResultSrcM [1:0] $end
$var wire 2 2 ForwardAE [1:0] $end
$var wire 2 3 ForwardBE [1:0] $end
$var wire 3 4 ALUControlE [2:0] $end
$var wire 5 5 RDW [4:0] $end
$var wire 5 6 RD_E [4:0] $end
$var wire 5 7 RD_M [4:0] $end
$var wire 5 8 RD_W [4:0] $end
$var wire 5 9 RS1_E [4:0] $end
$var wire 5 : RS2_E [4:0] $end
$var wire 5 ; RS1_E_H [4:0] $end
$var wire 5 < RS2_E_H [4:0] $end
$var wire 5 = RD_W_W [4:0] $end
$var wire 32 > PCTargetE [31:0] $end
$var wire 32 ? InstrD [31:0] $end
$var wire 32 @ PCD [31:0] $end
$var wire 32 A PCPlus4D [31:0] $end
$var wire 32 B PCPlus4E [31:0] $end
$var wire 32 C PCPlus4M [31:0] $end
$var wire 32 D PCPlus4W [31:0] $end
$var wire 32 E ResultW [31:0] $end
$var wire 32 F RD1_E [31:0] $end
$var wire 32 G RD2_E [31:0] $end
$var wire 32 H Imm_Ext_E [31:0] $end
$var wire 32 I PCE [31:0] $end
$var wire 32 J ALUResultM [31:0] $end
$var wire 32 K ALUResultM_E [31:0] $end
$var wire 32 L ALUResultW [31:0] $end
$var wire 32 M WriteDataM [31:0] $end
$var wire 32 N ReadDataW [31:0] $end
$scope module fetch $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 1 & PCSrcE $end
$var wire 32 > PCTargetE [31:0] $end
$var wire 32 ? InstrD [31:0] $end
$var wire 32 @ PCD [31:0] $end
$var wire 32 A PCPlus4D [31:0] $end
$var wire 32 O PC_F [31:0] $end
$var wire 32 P PCF [31:0] $end
$var wire 32 Q PCPlus4F [31:0] $end
$var wire 32 R InstrF [31:0] $end
$var reg 32 S InstrF_reg [31:0] $end
$var reg 32 T PCF_reg [31:0] $end
$var reg 32 U PCPlus4F_reg [31:0] $end
$scope module PC_Mux $end
$var wire 32 Q a [31:0] $end
$var wire 32 > b [31:0] $end
$var wire 1 & s $end
$var wire 32 O c [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 32 O PC_next [31:0] $end
$var reg 32 V PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 P a [31:0] $end
$var wire 32 W b [31:0] $end
$var wire 32 Q c [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 1 % rst $end
$var wire 32 P A [31:0] $end
$var wire 32 R RD [31:0] $end
$upscope $end
$upscope $end
$scope module decode $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 5 8 RDW [4:0] $end
$var wire 32 ? InstrD [31:0] $end
$var wire 32 @ PCD [31:0] $end
$var wire 32 A PCPlus4D [31:0] $end
$var wire 32 E ResultW [31:0] $end
$var wire 1 ' RegWriteW $end
$var wire 1 ( RegWriteE $end
$var wire 1 * ALUSrcE $end
$var wire 1 + MemWriteE $end
$var wire 1 - BranchE $end
$var wire 1 . JumpE $end
$var wire 2 / ResultSrcE [1:0] $end
$var wire 3 4 ALUControlE [2:0] $end
$var wire 32 F RD1_E [31:0] $end
$var wire 32 G RD2_E [31:0] $end
$var wire 32 H Imm_Ext_E [31:0] $end
$var wire 5 9 RS1_E [4:0] $end
$var wire 5 : RS2_E [4:0] $end
$var wire 5 6 RD_E [4:0] $end
$var wire 32 I PCE [31:0] $end
$var wire 32 B PCPlus4E [31:0] $end
$var wire 1 X RegWriteD $end
$var wire 1 Y ALUSrcD $end
$var wire 1 Z MemWriteD $end
$var wire 1 [ BranchD $end
$var wire 1 \ JumpD $end
$var wire 2 ] ResultSrcD [1:0] $end
$var wire 2 ^ ImmSrcD [1:0] $end
$var wire 3 _ ALUControlD [2:0] $end
$var wire 32 ` readData1_D [31:0] $end
$var wire 32 a readData2_D [31:0] $end
$var wire 32 b Imm_Ext_D [31:0] $end
$var reg 1 c RegWriteD_R $end
$var reg 1 d ALUSrcD_R $end
$var reg 1 e MemWriteD_R $end
$var reg 1 f BranchD_R $end
$var reg 1 g JumpD_R $end
$var reg 2 h ResultSrcD_R [1:0] $end
$var reg 3 i ALUControlD_R [2:0] $end
$var reg 32 j RD1_D_R [31:0] $end
$var reg 32 k RD2_D_R [31:0] $end
$var reg 32 l Imm_Ext_D_R [31:0] $end
$var reg 5 m RD_D_R [4:0] $end
$var reg 5 n RS1_D_R [4:0] $end
$var reg 5 o RS2_D_R [4:0] $end
$var reg 32 p PCD_R [31:0] $end
$var reg 32 q PCPlus4D_R [31:0] $end
$scope module control_unit $end
$var wire 7 r opcode [6:0] $end
$var wire 7 s funct7 [31:25] $end
$var wire 3 t funct3 [14:12] $end
$var wire 1 X RegWrite $end
$var wire 1 Y ALUSrc $end
$var wire 1 Z MemWrite $end
$var wire 1 [ Branch $end
$var wire 1 \ Jump $end
$var wire 2 ^ ImmSrc [1:0] $end
$var wire 2 ] ResultSrc [1:0] $end
$var wire 3 _ ALUControl [2:0] $end
$var wire 2 u ALUOp [1:0] $end
$scope module main_decoder $end
$var wire 7 r opcode [6:0] $end
$var wire 1 X RegWrite $end
$var wire 1 Z MemWrite $end
$var wire 1 Y ALUSrc $end
$var wire 1 [ Branch $end
$var wire 1 \ Jump $end
$var wire 2 ^ ImmSrc [1:0] $end
$var wire 2 ] ResultSrc [1:0] $end
$var wire 2 u ALUOp [1:0] $end
$upscope $end
$scope module alu_decoder $end
$var wire 2 u ALUOp [1:0] $end
$var wire 7 s funct7 [31:25] $end
$var wire 7 r opcode [6:0] $end
$var wire 3 t funct3 [14:12] $end
$var wire 3 _ ALUControl [2:0] $end
$var wire 2 v concatenation [1:0] $end
$upscope $end
$upscope $end
$scope module registerFile $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 5 w rs1 [19:15] $end
$var wire 5 x rs2 [24:20] $end
$var wire 5 8 rd [4:0] $end
$var wire 1 ' writeEnable $end
$var wire 32 E writeData [31:0] $end
$var wire 32 ` readData1 [31:0] $end
$var wire 32 a readData2 [31:0] $end
$var integer 32 y i [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 32 ? In [31:0] $end
$var wire 2 ^ ImmSrc [1:0] $end
$var wire 32 b Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module execute $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 32 F RD1_E [31:0] $end
$var wire 32 G RD2_E [31:0] $end
$var wire 32 I PCE [31:0] $end
$var wire 32 B PCPlus4E [31:0] $end
$var wire 32 H Imm_Ext_E [31:0] $end
$var wire 1 ( RegWriteE $end
$var wire 1 * ALUSrcE $end
$var wire 1 + MemWriteE $end
$var wire 1 - BranchE $end
$var wire 1 . JumpE $end
$var wire 2 / ResultSrcE [1:0] $end
$var wire 3 4 ALUControlE [2:0] $end
$var wire 5 9 RS1_E [4:0] $end
$var wire 5 : RS2_E [4:0] $end
$var wire 5 6 RD_E [4:0] $end
$var wire 2 2 ForwardAE [1:0] $end
$var wire 2 3 ForwardBE [1:0] $end
$var wire 32 E ResultW [31:0] $end
$var wire 32 J ALUResultM_E [31:0] $end
$var wire 32 J ALUResultM [31:0] $end
$var wire 32 M WriteDataM [31:0] $end
$var wire 32 > PCTargetE [31:0] $end
$var wire 32 C PCPlus4M [31:0] $end
$var wire 5 7 RD_M [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 , MemWriteM $end
$var wire 1 & PCSrcE $end
$var wire 2 1 ResultSrcM [1:0] $end
$var wire 5 ; RS1_E_H [4:0] $end
$var wire 5 < RS2_E_H [4:0] $end
$var reg 32 z ALUResultE_R [31:0] $end
$var reg 32 { WriteDataE_R [31:0] $end
$var reg 32 | PCPlus4E_R [31:0] $end
$var reg 5 } RD_E_R [4:0] $end
$var reg 1 ~ RegWriteE_R $end
$var reg 1 !! MemWriteE_R $end
$var reg 1 "! PCSrcE_R $end
$var reg 2 #! ResultSrcE_R [1:0] $end
$var wire 32 $! SrcAE [31:0] $end
$var wire 32 %! SrcBE [31:0] $end
$var wire 32 &! WriteDataE [31:0] $end
$var wire 32 '! ResultE [31:0] $end
$var wire 32 (! SrcBE_M [31:0] $end
$var wire 1 )! ZeroE $end
$scope module SrcAEMux $end
$var wire 32 F a [31:0] $end
$var wire 32 E b [31:0] $end
$var wire 32 J c [31:0] $end
$var wire 2 2 s [1:0] $end
$var wire 32 $! d [31:0] $end
$upscope $end
$scope module SrcBEMux $end
$var wire 32 G a [31:0] $end
$var wire 32 E b [31:0] $end
$var wire 32 J c [31:0] $end
$var wire 2 3 s [1:0] $end
$var wire 32 (! d [31:0] $end
$upscope $end
$scope module alu_mux $end
$var wire 32 (! a [31:0] $end
$var wire 32 H b [31:0] $end
$var wire 1 * s $end
$var wire 32 %! c [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 $! A [31:0] $end
$var wire 32 %! B [31:0] $end
$var wire 3 4 ALUControl [2:0] $end
$var wire 32 '! result [31:0] $end
$var wire 1 *! carry $end
$var wire 1 )! zero $end
$var wire 1 +! overflow $end
$var wire 1 ,! negative $end
$var wire 32 -! A_or_B [31:0] $end
$var wire 32 .! A_and_B [31:0] $end
$var wire 32 /! A_xor_B [31:0] $end
$var wire 32 0! not_B [31:0] $end
$var wire 32 1! mux_1 [31:0] $end
$var wire 32 2! mux_2 [31:0] $end
$var wire 32 3! sum [31:0] $end
$var wire 32 4! slt [31:0] $end
$var wire 1 5! cout $end
$upscope $end
$scope module pc_adder $end
$var wire 32 I a [31:0] $end
$var wire 32 H b [31:0] $end
$var wire 32 > c [31:0] $end
$upscope $end
$upscope $end
$scope module memory $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 1 ) RegWriteM $end
$var wire 1 , MemWriteM $end
$var wire 2 1 ResultSrcM [1:0] $end
$var wire 32 J ALUResultM [31:0] $end
$var wire 32 M WriteDataM [31:0] $end
$var wire 32 C PCPlus4M [31:0] $end
$var wire 5 7 RD_M [4:0] $end
$var wire 1 ' RegWriteW $end
$var wire 2 0 ResultSrcW [1:0] $end
$var wire 32 L ALUResultW [31:0] $end
$var wire 32 N ReadDataW [31:0] $end
$var wire 32 D PCPlus4W [31:0] $end
$var wire 5 8 RD_W [4:0] $end
$var reg 1 6! RegWriteM_R $end
$var reg 2 7! ResultSrcM_R [1:0] $end
$var reg 32 8! ALUResultM_R [31:0] $end
$var reg 32 9! ReadDataM_R [31:0] $end
$var reg 32 :! PCPlus4M_R [31:0] $end
$var reg 5 ;! RD_M_R [4:0] $end
$var wire 32 <! ReadDataM_W [31:0] $end
$scope module data_memory $end
$var wire 32 J A [31:0] $end
$var wire 32 M writeData [31:0] $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 1 , writeEnable $end
$var wire 32 <! RD [31:0] $end
$var integer 32 =! i [31:0] $end
$upscope $end
$upscope $end
$scope module writeback $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 1 ' RegWriteW $end
$var wire 2 0 ResultSrcW [1:0] $end
$var wire 5 8 RD_W [4:0] $end
$var wire 32 L ALUResultW [31:0] $end
$var wire 32 N ReadDataW [31:0] $end
$var wire 32 D PCPlus4W [31:0] $end
$var wire 32 E ResultW [31:0] $end
$var reg 32 >! ResultW_R [31:0] $end
$var wire 32 ?! ResultW_X [31:0] $end
$scope module mux_3_by_1 $end
$var wire 32 L a [31:0] $end
$var wire 32 N b [31:0] $end
$var wire 32 D c [31:0] $end
$var wire 2 0 s [1:0] $end
$var wire 32 ?! d [31:0] $end
$upscope $end
$upscope $end
$scope module hazard $end
$var wire 1 % rst $end
$var wire 1 ' RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 5 ; RS1_E [4:0] $end
$var wire 5 < RS2_E [4:0] $end
$var wire 5 7 RD_M [4:0] $end
$var wire 5 8 RD_W [4:0] $end
$var wire 2 2 ForwardAE [1:0] $end
$var wire 2 3 ForwardBE [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
1!
0!!
0"
0"!
b0 #
b0 #!
1$
b0 $!
0%
b0 %!
0&
b0 &!
0'
b0 '!
0(
b0 (!
0)
1)!
0*
0*!
0+
0+!
0,
0,!
0-
bz -!
0.
bz .!
b0 /
bz /!
b0 0
bz 0!
b0 1
b0 1!
b0 2
b0 2!
b0 3
b0 3!
b0 4
b0 4!
bz 5
05!
b0 6
06!
b0 7
b0 7!
b0 8
b0 8!
b0 9
b0 9!
b0 :
b0 :!
b0 ;
b0 ;!
b0 <
b0 <!
bz =
bx =!
b0 >
bx >!
b0 ?
b0 ?!
b0 @
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b0 H
b0 I
b0 J
bz K
b0 L
b0 M
b0 N
b100 O
b0 P
b100 Q
b0 R
b0 S
b0 T
b0 U
b0 V
b100 W
0X
0Y
0Z
0[
0\
b0 ]
b0 ^
b0 _
b0 `
b0 a
b0 b
0c
0d
0e
0f
0g
b0 h
b0 i
b0 j
b0 k
b0 l
b0 m
b0 n
b0 o
b0 p
b0 q
b0 r
b0 s
b0 t
b0 u
b0 v
b0 w
b0 x
bx y
b0 z
b0 {
b0 |
b0 }
0~
$end

#50000
0!
0$

#100000
1!
1$

#150000
0!
0$

#200000
1!
1"
1$
1%
b10100000000001010010011 R

#250000
0!
0$

#300000
1!
1$
b10100000000001010010011 ?
b100 A
b1000 O
b100 P
b1000 Q
b1100000000001100010011 R
b10100000000001010010011 S
b100 U
b100 V
1X
1Y
b101 b
b10011 r
b0 s
b0 t
b0 w
b101 x

#350000
0!
0$

#400000
1!
1$
b101 %!
b101 '!
1(
0)!
1*
b101 1!
b101 2!
b101 3!
b101 6
b101 :
b101 <
b101 >
b1100000000001100010011 ?
b100 @
b1000 A
b100 B
b101 H
b1100 O
b1000 P
b1100 Q
b11000101000001110110011 R
b1100000000001100010011 S
b100 T
b1000 U
b1000 V
b11 b
1c
1d
b101 l
b101 m
b101 o
b100 q
b10011 r
b0 s
b0 t
b0 w
b11 x

#450000
0!
0$

#500000
1!
1$
b11 %!
b11 '!
1)
b11 1!
b11 2!
b11 3!
b110 6
b101 7
b11 :
b11 <
b111 >
b11000101000001110110011 ?
b1000 @
b1100 A
b1000 B
b100 C
b11 H
b100 I
b101 J
b10000 O
b1100 P
b10000 Q
b10010000000011 R
b11000101000001110110011 S
b1000 T
b1100 U
b1100 V
0Y
b110 b
b11 l
b110 m
b11 o
b100 p
b1000 q
b110011 r
b0 s
b0 t
b10 u
b10 v
b101 w
b110 x
b101 z
b100 |
b101 }
1~

#550000
0!
0$

#600000
1!
b101 #
1$
b101 $!
b11 %!
1'
b1000 '!
b11 (!
0)!
0*
b11 1!
b1 2
b1000 2!
b10 3
b1000 3!
b111 6
16!
b110 7
b101 8
b101 8!
b101 9
b110 :
b100 :!
b101 ;
b101 ;!
b110 <
b1110 >
b10010000000011 ?
b101 ?!
b1100 @
b10000 A
b1100 B
b1000 C
b100 D
b101 E
b110 H
b1000 I
b11 J
b101 L
b10100 O
b10000 P
b10100 Q
b100000000010010010011 R
b10010000000011 S
b1100 T
b10000 U
b10000 V
1Y
b1 ]
b0 b
0d
b110 l
b111 m
b101 n
b110 o
b1000 p
b1100 q
b11 r
b0 s
b10 t
b0 u
b0 v
b0 w
b0 x
b11 z
b1000 |
b110 }

#650000
0!
0$

#700000
1!
b11 #
1$
b0 $!
b0 %!
b11 &!
b0 '!
b0 (!
1)!
1*
b1 /
b0 1!
b0 2
b0 2!
b0 3
b0 3!
b1000 6
b111 7
b110 8
b11 8!
b0 9
b0 :
b1000 :!
b0 ;
b110 ;!
b0 <
b1100 >
b100000000010010010011 ?
b11 ?!
b10000 @
b10100 A
b10000 B
b1100 C
b1000 D
b11 E
b0 H
b1100 I
b1000 J
b11 L
b11 M
b11000 O
b10100 P
b11000 Q
b100101000000010100110011 R
b100000000010010010011 S
b10000 T
b10100 U
b10100 V
b0 ]
b1 b
1d
b1 h
b0 l
b1000 m
b0 n
b0 o
b1100 p
b10000 q
b10011 r
b0 s
b0 t
b0 w
b1 x
b1000 z
b11 {
b1100 |
b111 }

#750000
0!
0$

#800000
1!
b1000 #
b1 #!
1$
b1 %!
b0 &!
b1 '!
0)!
b0 /
b1 1
b1 1!
b1 2!
b1 3!
b1001 6
b1000 7
b111 8
b1000 8!
b1 :
b1100 :!
b111 ;!
b1 <
b10001 >
b100101000000010100110011 ?
b1000 ?!
b10100 @
b11000 A
b10100 B
b10000 C
b1100 D
b1000 E
b1 H
b10000 I
b0 J
b1000 L
b0 M
b11100 O
b11000 P
b11100 Q
bx R
b100101000000010100110011 S
b10100 T
b11000 U
b11000 V
0Y
b1001 b
b0 h
b1 l
b1001 m
b1 o
b10000 p
b10100 q
b110011 r
b0 s
b0 t
b10 u
b10 v
b1000 w
b1001 x
b0 z
b0 {
b10000 |
b1000 }

#850000
0!
0$

#900000
1!
b0 #
b0 #!
1$
b0 $!
b1 %!
b1 '!
b1 (!
0*
b1 0
b0 1
b1 1!
b1 2
b1 2!
b10 3
b1 3!
b1010 6
b1001 7
b1 7!
b1000 8
b0 8!
b1000 9
b1001 :
b10000 :!
b1000 ;
b1000 ;!
b1001 <
b11101 >
bx ?
b0 ?!
b11000 @
b11100 A
b11000 B
b10100 C
b10000 D
b0 E
b1001 H
b10100 I
b1 J
b0 L
b100000 O
b11100 P
b100000 Q
bx S
b11000 T
b11100 U
b11100 V
xX
xY
xZ
x[
x\
bx ]
bx ^
bx _
bx `
bx a
bx b
0d
b1001 l
b1010 m
b1000 n
b1001 o
b10100 p
b11000 q
bx r
bx s
bx t
bx u
bx v
bx w
bx x
b1 z
b10100 |
b1001 }

#950000
0!
0$

#1000000
1!
b1 #
1$
bx $!
bx %!
b1 &!
bx '!
x(
bx (!
x)!
x*
x*!
x+
x+!
x,!
x-
x.
bx /
b0 0
bx 1!
bx 2
bx 2!
bx 3
bx 3!
bx 4
b0x 4!
x5!
bx 6
b1010 7
b0 7!
b1001 8
b1 8!
bx 9
bx :
b10100 :!
bx ;
b1001 ;!
bx <
bx >
b1 ?!
b11100 @
b100000 A
b11100 B
b11000 C
b10100 D
b1 E
bx F
bx G
bx H
b11000 I
b1 L
b1 M
b100100 O
b100000 P
b100100 Q
b11100 T
b100000 U
b100000 V
xc
xd
xe
xf
xg
bx h
bx i
bx j
bx k
bx l
bx m
bx n
bx o
b11000 p
b11100 q
b1 {
b11000 |
b1010 }
